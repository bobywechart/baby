<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wechat.baby.mapper.AdminMapper">
	<resultMap id="Admin" type="admin">
		<id property="id" column="id" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="email" column="email" />
		<result property="realName" column="real_name" />
	    <result property="mobile" column="mobile" />
		<result property="company" column="company" />
		<result property="department" column="department" />
		<result property="isEnabled" column="is_enabled" />
		<result property="isLocked" column="is_locked" />
		<result property="loginFailureCount" column="login_failure_count" />
		<result property="loginIp" column="login_ip" />
		<result property="lockedDate" column="locked_date" javaType="java.util.Date" />
		<result property="createDate" column="create_date" javaType="java.util.Date" />
		<result property="modifyDate" column="modify_date" javaType="java.util.Date" />
		<collection property="roles" ofType="role">
			<id property="id" column="role_id"/>
			<result property="name" column="name" />
			<result property="isSystem" column="is_system" />
			<result property="description" column="description" />
		</collection>
	</resultMap>

	<sql id="forUpdate">
	    for update
	</sql>
	
	<select id="getAdminByUsername" parameterType="hashmap" resultMap="Admin">
	    select a.*,r.id as role_id,r.name,r.is_system,r.description  
	      from baby_admin a,baby_role r,baby_admin_role ar 
	     where a.id = ar.admins and ar.roles = r.id and a.username = #{username}
		<if test="isUpdate == true">
			<include refid="forUpdate" />
		</if>
	</select>
	
	<select id="getAdminById" parameterType="hashmap" resultMap="Admin">
	    select a.*,r.id as role_id,r.name,r.is_system,r.description
	      from baby_admin a,baby_role r,baby_admin_role ar 
	     where a.id = ar.admins and ar.roles = r.id and a.id = #{id}
		<if test="isUpdate == true">
			<include refid="forUpdate" />
		</if>
	</select>
	
	<select id="getAdmin" resultMap="Admin">
	    select * from baby_admin
	</select>
	
	<update id="updateAdminLocked" parameterType="admin">
	    update baby_admin set is_locked = #{isLocked}, login_failure_count = #{loginFailureCount,jdbcType=INTEGER},
	           locked_date = #{lockedDate,jdbcType=TIMESTAMP}
	     where id = #{id}
	</update>
	
	<insert id="saveAdmin" parameterType="admin" useGeneratedKeys="true" keyProperty="id">
		insert into baby_admin(username,password,email,real_name,mobile,company,department,is_enabled,is_locked,login_failure_count,
		       locked_date,login_ip,create_date)
		values(#{username,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{realName,jdbcType=VARCHAR},
		       #{mobile,jdbcType=VARCHAR},#{company,jdbcType=VARCHAR},#{department,jdbcType=VARCHAR},#{isEnabled,jdbcType=INTEGER},
		       #{isLocked,jdbcType=INTEGER},#{loginFailureCount,jdbcType=INTEGER},#{lockedDate,jdbcType=TIMESTAMP},
		       #{loginIp,jdbcType=VARCHAR},now())
	</insert>
	
	<insert id="saveRole" parameterType="java.util.HashMap">
		insert into baby_admin_role(admins,roles) values
		<foreach collection="roles" item="item" index="index" separator=",">  
			(#{id,jdbcType=INTEGER},#{item.id,jdbcType=INTEGER})
		</foreach>
	</insert>
	
	<update id="updateAdmin" parameterType="admin">
	    update baby_admin set password=#{password,jdbcType=VARCHAR},email=#{email,jdbcType=VARCHAR},mobile=#{mobile,jdbcType=VARCHAR},
	           company=#{company,jdbcType=VARCHAR},department=#{department,jdbcType=VARCHAR},is_enabled=#{isEnabled,jdbcType=INTEGER},
	           is_locked=#{isLocked,jdbcType=INTEGER},login_failure_count=#{loginFailureCount,jdbcType=INTEGER},
	           login_ip=#{loginIp,jdbcType=VARCHAR}
	     where id = #{id}
	</update>
	
	<select id="listAuth" parameterType="java.lang.Long" resultType="java.lang.String">
	    select distinct a.authority from baby_role_authority a 
	     where a.role_id in (select r.roles from baby_admin_role r where r.admins = #{id})
	</select>
</mapper>